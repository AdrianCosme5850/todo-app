{"ast":null,"code":"/*\n * Copyright 2021 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, Utils as CoreUtils, mergeRefs, Portal } from \"@blueprintjs/core\";\nimport * as Classes from \"./classes\";\nimport { Popover2 } from \"./popover2\";\nimport { Tooltip2Context, Tooltip2Provider } from \"./tooltip2Context\";\nexport var ContextMenu2 = React.forwardRef(function (props, userRef) {\n  var _a;\n  var _b, _c;\n  var className = props.className,\n    children = props.children,\n    content = props.content,\n    _d = props.disabled,\n    disabled = _d === void 0 ? false : _d,\n    onContextMenu = props.onContextMenu,\n    popoverProps = props.popoverProps,\n    _e = props.tagName,\n    tagName = _e === void 0 ? \"div\" : _e,\n    restProps = __rest(props, [\"className\", \"children\", \"content\", \"disabled\", \"onContextMenu\", \"popoverProps\", \"tagName\"]);\n  // ancestor Tooltip2Context state doesn't affect us since we don't care about parent ContextMenu2s, we only want to\n  // force disable parent Tooltip2s in certain cases through dispatching actions\n  // N.B. any calls to this dispatch function will be no-ops if there is no Tooltip2Provider ancestor of this component\n  var _f = React.useContext(Tooltip2Context),\n    tooltipCtxDispatch = _f[1];\n  // click target offset relative to the viewport (e.clientX/clientY), since the target will be rendered in a Portal\n  var _g = React.useState(undefined),\n    targetOffset = _g[0],\n    setTargetOffset = _g[1];\n  // hold a reference to the click mouse event to pass to content/child render functions\n  var _h = React.useState(),\n    mouseEvent = _h[0],\n    setMouseEvent = _h[1];\n  var _j = React.useState(false),\n    isOpen = _j[0],\n    setIsOpen = _j[1];\n  // we need a ref on the child element (or the wrapper we generate) to check for dark theme\n  var childRef = React.useRef(null);\n  // If disabled prop is changed, we don't want our old context menu to stick around.\n  // If it has just been enabled (disabled = false), then the menu ought to be opened by\n  // a new mouse event. Users should not be updating this prop in the onContextMenu callback\n  // for this component (that will lead to unpredictable behavior).\n  React.useEffect(function () {\n    setIsOpen(false);\n    tooltipCtxDispatch({\n      type: \"RESET_DISABLED_STATE\"\n    });\n  }, [disabled]);\n  var cancelContextMenu = React.useCallback(function (e) {\n    return e.preventDefault();\n  }, []);\n  var handlePopoverInteraction = React.useCallback(function (nextOpenState) {\n    if (!nextOpenState) {\n      setIsOpen(false);\n      setMouseEvent(undefined);\n      tooltipCtxDispatch({\n        type: \"RESET_DISABLED_STATE\"\n      });\n    }\n  }, []);\n  // Popover2 should attach its ref to the virtual target we render inside a Portal, not the \"inline\" child target\n  var renderTarget = React.useCallback(function (_a) {\n    var ref = _a.ref;\n    return React.createElement(Portal, null, React.createElement(\"div\", {\n      className: Classes.CONTEXT_MENU2_VIRTUAL_TARGET,\n      style: targetOffset,\n      ref: ref\n    }));\n  }, [targetOffset]);\n  // if the menu was just opened, we should check for dark theme (but don't do this on every render)\n  var isDarkTheme = React.useMemo(function () {\n    return CoreUtils.isDarkTheme(childRef.current);\n  }, [childRef, isOpen]);\n  // only render the popover if there is content in the context menu;\n  // this avoid doing unnecessary rendering & computation\n  var contentProps = {\n    isOpen: isOpen,\n    mouseEvent: mouseEvent,\n    targetOffset: targetOffset\n  };\n  var menu = disabled ? undefined : CoreUtils.isFunction(content) ? content(contentProps) : content;\n  var maybePopover = menu === undefined ? undefined : React.createElement(Popover2, __assign({}, popoverProps, {\n    content:\n    // this prevents right-clicking inside our context menu\n    React.createElement(\"div\", {\n      onContextMenu: cancelContextMenu\n    }, menu),\n    enforceFocus: false,\n    // Generate key based on offset so that a new Popover instance is created\n    // when offset changes, to force recomputing position.\n    key: getPopoverKey(targetOffset),\n    hasBackdrop: true,\n    backdropProps: {\n      className: Classes.CONTEXT_MENU2_BACKDROP\n    },\n    isOpen: isOpen,\n    minimal: true,\n    onInteraction: handlePopoverInteraction,\n    popoverClassName: classNames(Classes.CONTEXT_MENU2_POPOVER2, popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.popoverClassName, (_a = {}, _a[CoreClasses.DARK] = isDarkTheme, _a)),\n    placement: \"right-start\",\n    positioningStrategy: \"fixed\",\n    rootBoundary: (_b = popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.rootBoundary) !== null && _b !== void 0 ? _b : \"viewport\",\n    renderTarget: renderTarget,\n    transitionDuration: (_c = popoverProps === null || popoverProps === void 0 ? void 0 : popoverProps.transitionDuration) !== null && _c !== void 0 ? _c : 100\n  }));\n  var handleContextMenu = React.useCallback(function (e) {\n    // support nested menus (inner menu target would have called preventDefault())\n    if (e.defaultPrevented) {\n      return;\n    }\n    // If disabled, we should avoid this extra work.\n    // Otherwise: if using the child or content function APIs, we need to make sure contentProps gets updated,\n    // so we handle the event regardless of whether the consumer returned an undefined menu.\n    var shouldHandleEvent = !disabled && (CoreUtils.isFunction(children) || CoreUtils.isFunction(content) || maybePopover !== undefined);\n    if (shouldHandleEvent) {\n      e.preventDefault();\n      e.persist();\n      setMouseEvent(e);\n      setTargetOffset({\n        left: e.clientX,\n        top: e.clientY\n      });\n      setIsOpen(true);\n      tooltipCtxDispatch({\n        type: \"FORCE_DISABLED_STATE\"\n      });\n    }\n    onContextMenu === null || onContextMenu === void 0 ? void 0 : onContextMenu(e);\n  }, [onContextMenu, disabled]);\n  var containerClassName = classNames(className, Classes.CONTEXT_MENU2);\n  var child = CoreUtils.isFunction(children) ? children({\n    className: containerClassName,\n    contentProps: contentProps,\n    onContextMenu: handleContextMenu,\n    popover: maybePopover,\n    ref: childRef\n  }) : React.createElement(React.Fragment, null, maybePopover, React.createElement(tagName, __assign({\n    className: containerClassName,\n    onContextMenu: handleContextMenu,\n    ref: mergeRefs(childRef, userRef)\n  }, restProps), children));\n  // force descendant Tooltip2s to be disabled when this context menu is open\n  return React.createElement(Tooltip2Provider, {\n    forceDisable: isOpen\n  }, child);\n});\nContextMenu2.displayName = \"Blueprint.ContextMenu2\";\nfunction getPopoverKey(targetOffset) {\n  return targetOffset === undefined ? \"default\" : \"\".concat(targetOffset.left, \"x\").concat(targetOffset.top);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SACIC,OAAO,IAAIC,WAAW,EACtBC,KAAK,IAAIC,SAAS,EAElBC,SAAS,EACTC,MAAM,QAEH,mBAAmB;AAE1B,OAAO,KAAKL,OAAO,MAAM,WAAW;AACpC,SAASM,QAAQ,QAAuB,YAAY;AAEpD,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,mBAAmB;AA6FrE,OAAO,IAAMC,YAAY,GAAgCV,KAAK,CAACW,UAAU,CAAyB,UAACC,KAAK,EAAEC,OAAO;;;EAEzG,aAAS,GAQTD,KAAK,UARI;IACTE,QAAQ,GAORF,KAAK,SAPG;IACRG,OAAO,GAMPH,KAAK,QANE;IACPI,KAKAJ,KAAK,SALW;IAAhBK,QAAQ,mBAAG,KAAK;IAChBC,aAAa,GAIbN,KAAK,cAJQ;IACbO,YAAY,GAGZP,KAAK,aAHO;IACZQ,KAEAR,KAAK,QAFU;IAAfS,OAAO,mBAAG,KAAK;IACZC,SAAS,UACZV,KAAK,EATH,4FASL,CADe;EAGhB;EACA;EACA;EACM,SAAyBZ,KAAK,CAACuB,UAAU,CAACf,eAAe,CAAC;IAAvDgB,kBAAkB,QAAqC;EAChE;EACM,SAAkCxB,KAAK,CAACyB,QAAQ,CAAqBC,SAAS,CAAC;IAA9EC,YAAY;IAAEC,eAAe,QAAiD;EACrF;EACM,SAA8B5B,KAAK,CAACyB,QAAQ,EAAiC;IAA5EI,UAAU;IAAEC,aAAa,QAAmD;EAC7E,SAAsB9B,KAAK,CAACyB,QAAQ,CAAU,KAAK,CAAC;IAAnDM,MAAM;IAAEC,SAAS,QAAkC;EAC1D;EACA,IAAMC,QAAQ,GAAGjC,KAAK,CAACkC,MAAM,CAAiB,IAAI,CAAC;EAEnD;EACA;EACA;EACA;EACAlC,KAAK,CAACmC,SAAS,CAAC;IACZH,SAAS,CAAC,KAAK,CAAC;IAChBR,kBAAkB,CAAC;MAAEY,IAAI,EAAE;IAAsB,CAAE,CAAC;EACxD,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EAEd,IAAMoB,iBAAiB,GAAGrC,KAAK,CAACsC,WAAW,CAAC,UAACC,CAAuC;IAAK,QAAC,CAACC,cAAc,EAAE;EAAlB,CAAkB,EAAE,EAAE,CAAC;EAEhH,IAAMC,wBAAwB,GAAGzC,KAAK,CAACsC,WAAW,CAAC,UAACI,aAAsB;IACtE,IAAI,CAACA,aAAa,EAAE;MAChBV,SAAS,CAAC,KAAK,CAAC;MAChBF,aAAa,CAACJ,SAAS,CAAC;MACxBF,kBAAkB,CAAC;QAAEY,IAAI,EAAE;MAAsB,CAAE,CAAC;;EAE5D,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,IAAMO,YAAY,GAAG3C,KAAK,CAACsC,WAAW,CAClC,UAACM,EAA4B;QAA1BC,GAAG;IAA4B,OAC9B7C,oBAACM,MAAM,QACHN;MAAK8C,SAAS,EAAE7C,OAAO,CAAC8C,4BAA4B;MAAEC,KAAK,EAAErB,YAAY;MAAEkB,GAAG,EAAEA;IAAG,EAAI,CAClF;EAHqB,CAIjC,EACD,CAAClB,YAAY,CAAC,CACjB;EAED;EACA,IAAMsB,WAAW,GAAGjD,KAAK,CAACkD,OAAO,CAAC;IAAM,gBAAS,CAACD,WAAW,CAAChB,QAAQ,CAACkB,OAAO,CAAC;EAAvC,CAAuC,EAAE,CAAClB,QAAQ,EAAEF,MAAM,CAAC,CAAC;EAEpG;EACA;EACA,IAAMqB,YAAY,GAA6B;IAAErB,MAAM;IAAEF,UAAU;IAAEF,YAAY;EAAA,CAAE;EACnF,IAAM0B,IAAI,GAAGpC,QAAQ,GAAGS,SAAS,GAAGtB,SAAS,CAACkD,UAAU,CAACvC,OAAO,CAAC,GAAGA,OAAO,CAACqC,YAAY,CAAC,GAAGrC,OAAO;EACnG,IAAMwC,YAAY,GACdF,IAAI,KAAK3B,SAAS,GAAGA,SAAS,GAC1B1B,oBAACO,QAAQ,eACDY,YAAY;IAChBJ,OAAO;IACH;IACAf;MAAKkB,aAAa,EAAEmB;IAAiB,GAAGgB,IAAI,CAAO;IAEvDG,YAAY,EAAE,KAAK;IACnB;IACA;IACAC,GAAG,EAAEC,aAAa,CAAC/B,YAAY,CAAC;IAChCgC,WAAW,EAAE,IAAI;IACjBC,aAAa,EAAE;MAAEd,SAAS,EAAE7C,OAAO,CAAC4D;IAAsB,CAAE;IAC5D9B,MAAM,EAAEA,MAAM;IACd+B,OAAO,EAAE,IAAI;IACbC,aAAa,EAAEtB,wBAAwB;IACvCuB,gBAAgB,EAAEjE,UAAU,CAACE,OAAO,CAACgE,sBAAsB,EAAE9C,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE6C,gBAAgB,YACvFpB,GAAC1C,WAAW,CAACgE,IAAI,IAAGjB,WAAW,MACjC;IACFkB,SAAS,EAAC,aAAa;IACvBC,mBAAmB,EAAC,OAAO;IAC3BC,YAAY,EAAE,kBAAY,aAAZlD,YAAY,uBAAZA,YAAY,CAAEkD,YAAY,mCAAI,UAAU;IACtD1B,YAAY,EAAEA,YAAY;IAC1B2B,kBAAkB,EAAE,kBAAY,aAAZnD,YAAY,uBAAZA,YAAY,CAAEmD,kBAAkB,mCAAI;EAAG,GAElE;EAEL,IAAMC,iBAAiB,GAAGvE,KAAK,CAACsC,WAAW,CACvC,UAACC,CAAgC;IAC7B;IACA,IAAIA,CAAC,CAACiC,gBAAgB,EAAE;MACpB;;IAGJ;IACA;IACA;IACA,IAAMC,iBAAiB,GACnB,CAACxD,QAAQ,KACRb,SAAS,CAACkD,UAAU,CAACxC,QAAQ,CAAC,IAAIV,SAAS,CAACkD,UAAU,CAACvC,OAAO,CAAC,IAAIwC,YAAY,KAAK7B,SAAS,CAAC;IAEnG,IAAI+C,iBAAiB,EAAE;MACnBlC,CAAC,CAACC,cAAc,EAAE;MAClBD,CAAC,CAACmC,OAAO,EAAE;MACX5C,aAAa,CAACS,CAAC,CAAC;MAChBX,eAAe,CAAC;QAAE+C,IAAI,EAAEpC,CAAC,CAACqC,OAAO;QAAEC,GAAG,EAAEtC,CAAC,CAACuC;MAAO,CAAE,CAAC;MACpD9C,SAAS,CAAC,IAAI,CAAC;MACfR,kBAAkB,CAAC;QAAEY,IAAI,EAAE;MAAsB,CAAE,CAAC;;IAGxDlB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGqB,CAAC,CAAC;EACtB,CAAC,EACD,CAACrB,aAAa,EAAED,QAAQ,CAAC,CAC5B;EAED,IAAM8D,kBAAkB,GAAGhF,UAAU,CAAC+C,SAAS,EAAE7C,OAAO,CAAC+E,aAAa,CAAC;EAEvE,IAAMC,KAAK,GAAG7E,SAAS,CAACkD,UAAU,CAACxC,QAAQ,CAAC,GACxCA,QAAQ,CAAC;IACLgC,SAAS,EAAEiC,kBAAkB;IAC7B3B,YAAY;IACZlC,aAAa,EAAEqD,iBAAiB;IAChCW,OAAO,EAAE3B,YAAY;IACrBV,GAAG,EAAEZ;GACR,CAAC,GAEFjC,0CACKuD,YAAY,EACZvD,KAAK,CAACmF,aAAa,CAChB9D,OAAO;IAEHyB,SAAS,EAAEiC,kBAAkB;IAC7B7D,aAAa,EAAEqD,iBAAiB;IAChC1B,GAAG,EAAExC,SAAS,CAAC4B,QAAQ,EAAEpB,OAAO;EAAC,GAC9BS,SAAS,GAEhBR,QAAQ,CACX,CAER;EAED;EACA,OAAOd,oBAACS,gBAAgB;IAAC2E,YAAY,EAAErD;EAAM,GAAGkD,KAAK,CAAoB;AAC7E,CAAC,CAAC;AACFvE,YAAY,CAAC2E,WAAW,GAAG,wBAAwB;AAEnD,SAAS3B,aAAa,CAAC/B,YAAgC;EACnD,OAAOA,YAAY,KAAKD,SAAS,GAAG,SAAS,GAAG,UAAGC,YAAY,CAACgD,IAAI,cAAIhD,YAAY,CAACkD,GAAG,CAAE;AAC9F","names":["classNames","React","Classes","CoreClasses","Utils","CoreUtils","mergeRefs","Portal","Popover2","Tooltip2Context","Tooltip2Provider","ContextMenu2","forwardRef","props","userRef","children","content","_d","disabled","onContextMenu","popoverProps","_e","tagName","restProps","useContext","tooltipCtxDispatch","useState","undefined","targetOffset","setTargetOffset","mouseEvent","setMouseEvent","isOpen","setIsOpen","childRef","useRef","useEffect","type","cancelContextMenu","useCallback","e","preventDefault","handlePopoverInteraction","nextOpenState","renderTarget","_a","ref","className","CONTEXT_MENU2_VIRTUAL_TARGET","style","isDarkTheme","useMemo","current","contentProps","menu","isFunction","maybePopover","enforceFocus","key","getPopoverKey","hasBackdrop","backdropProps","CONTEXT_MENU2_BACKDROP","minimal","onInteraction","popoverClassName","CONTEXT_MENU2_POPOVER2","DARK","placement","positioningStrategy","rootBoundary","transitionDuration","handleContextMenu","defaultPrevented","shouldHandleEvent","persist","left","clientX","top","clientY","containerClassName","CONTEXT_MENU2","child","popover","createElement","forceDisable","displayName"],"sourceRoot":"","sources":["../../src/contextMenu2.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}