{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { iconNameToPathsRecordKey, IconSvgPaths16, IconSvgPaths20 } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nimport { uniqueId } from \"../../common/utils\";\nexport var IconSize;\n(function (IconSize) {\n  IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n  IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\nvar Icon = /** @class */function (_super) {\n  __extends(Icon, _super);\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Icon.prototype.render = function () {\n    var icon = this.props.icon;\n    if (icon == null || typeof icon === \"boolean\") {\n      return null;\n    } else if (typeof icon !== \"string\") {\n      return icon;\n    }\n    var _a = this.props,\n      className = _a.className,\n      color = _a.color,\n      htmlTitle = _a.htmlTitle,\n      // eslint-disable-next-line deprecation/deprecation\n      iconSize = _a.iconSize,\n      intent = _a.intent,\n      _b = _a.size,\n      size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b,\n      title = _a.title,\n      _c = _a.tagName,\n      tagName = _c === void 0 ? \"span\" : _c,\n      htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]);\n    // choose which pixel grid is most appropriate for given icon size\n    var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD;\n    // render path elements, or nothing if icon name is unknown.\n    var paths = this.renderSvgPaths(pixelGridSize, icon);\n    var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n    var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n    var titleId = uniqueId(\"iconTitle\");\n    return React.createElement(tagName, __assign(__assign({}, htmlprops), {\n      \"aria-hidden\": title ? undefined : true,\n      className: classes,\n      title: htmlTitle\n    }), React.createElement(\"svg\", {\n      fill: color,\n      \"data-icon\": icon,\n      width: size,\n      height: size,\n      viewBox: viewBox,\n      \"aria-labelledby\": title ? titleId : undefined,\n      role: \"img\"\n    }, title && React.createElement(\"title\", {\n      id: titleId\n    }, title), paths));\n  };\n  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n    var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n    var paths = svgPathsRecord[iconNameToPathsRecordKey(iconName)];\n    if (paths == null) {\n      return null;\n    }\n    return paths.map(function (path, i) {\n      return React.createElement(\"path\", {\n        key: i,\n        d: path,\n        fillRule: \"evenodd\"\n      });\n    });\n  };\n  Icon.displayName = \"\".concat(DISPLAYNAME_PREFIX, \".Icon\");\n  return Icon;\n}(AbstractPureComponent2);\nexport { Icon };","map":{"version":3,"mappings":"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","names":["classNames","React","iconNameToPathsRecordKey","IconSvgPaths16","IconSvgPaths20","AbstractPureComponent2","Classes","DISPLAYNAME_PREFIX","uniqueId","IconSize","__extends","Icon","props","icon","_a","className","color","htmlTitle","iconSize","intent","_b","size","STANDARD","title","_c","tagName","htmlprops","pixelGridSize","LARGE","paths","renderSvgPaths","classes","ICON","iconClass","intentClass","viewBox","titleId","createElement","undefined","fill","width","height","role","id","pathsSize","iconName","svgPathsRecord","map","path","i","key","d","fillRule"],"sourceRoot":"","sources":["../../../../src/components/icon/icon.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}